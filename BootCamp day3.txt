1)
Number Series with a Twist 2
Consider the following series: 1, 1, 2, 3, 4, 9, 8, 27, 16, 81, 32, 243, 64, 729, 128, 2187 ...
This series is a mixture of 2 series – all the odd terms in this series form a geometric series
and all the even terms form yet another geometric series. Write a program to find the Nth
term in the series.
The value N in a positive integer that should be read from STDIN. The Nth term that is
calculated by the program should be written to STDOUT. Other than value of n th term,no
other character / string or message should be written to STDOUT. For example , if N=16, the
16th term in the series is 2187, so only value 2187 should be printed to STDOUT.
You can assume that N will not exceed 30.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter size");
        int size= sc.nextInt();
        int a[]=new int[size];

        int num1=1;
        int num2=1;
        for(int i=0;i<a.length;i++)
        {
            if(i%2==0)
            {
                a[i]=num1;
              num1=num1*2;

            }
            else
            {
                a[i]=num2;
                num2=num2*3;
            }
        }
        System.out.println("enter n");
        int n= sc.nextInt();
        for(int i=0;i<a.length;i++)
        {
            if(i==n-1)
            {
                System.out.print(a[i] + " ");
            }
        }
    }
}
--------------------------------------------------------------------------------------
2)
Consider the below series :
0, 0, 2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8
This series is a mixture of 2 series all the odd terms in this series form even numbers in
ascending order and every even terms is derived from the previous term using the formula
(x/2)
Write a program to find the nth term in this series.
The value n in a positive integer that should be read from STDIN the nth term that is
calculated by the program should be written to STDOUT. Other than the value of the nth
term no other characters /strings or message should be written to STDOUT.
For example if n=10,the 10 th term in the series is to be derived from the 9th term in the
series. The 9th term is 8 so the 10th term is (8/2)=4. Only the value 4 should be printed to
STDOUT.
You can assume that the n will not exceed 20,000

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter size");
        int size= sc.nextInt();
        int a[]=new int[size];

        int num1=0;
        for(int i=0;i<a.length;i++)
        {
            if(i%2==0)
            {
                a[i]=num1;
              num1=num1+2;

            }
            else
            {
                a[i]=a[i-1]/2;
            }
        }
        System.out.println("enter nth term");
        int n= sc.nextInt();
        for(int i=0;i<a.length;i++)
        {
            if(i==n-1)
            {
                System.out.print(a[i] + " ");
            }
        }
    }
}
-------------------------------------------------------------------------------------------
3)
Number Series with a Twist 3
Consider the below series :
0, 0, 2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8
This series is a mixture of 2 series all the odd terms in this series form even numbers in
ascending order and every even terms is derived from the previous term using the formula
(x/2)
Write a program to find the nth term in this series.

The value n in a positive integer that should be read from STDIN the nth term that is
calculated by the program should be written to STDOUT. Other than the value of the nth
term no other characters /strings or message should be written to STDOUT.
For example if n=10,the 10 th term in the series is to be derived from the 9th term in the
series. The 9th term is 8 so the 10th term is (8/2)=4. Only the value 4 should be printed to
STDOUT.
You can assume that the n will not exceed 20,000.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter Number");
        int n= sc.nextInt();

        int a[]={0, 0, 2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8};

        int count=0;
        for(int i=0;i<n;i++)
        {
            if(a[i]%2==0)
            {
                count++;
            }
        }
        System.out.println(count);
    }
}
----------------------------------------------------------------------------------------
4)
Addition of two numbers a Twist
Using a method, pass two variables and find the sum of two numbers.
Test case:
Number 1 – 20
Number 2 – 20.38
Sum = 40.38

There were a total of 4 test cases. Once you compile 3 of them will be shown to you
and 1 will be a hidden one. You have to display error message if numbers are not
numeric.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int p=0;
        while(p<4)
        {
            System.out.println("enter Number1");
            float a = sc.nextFloat();
            System.out.println("enter Number2");
            float b = sc.nextFloat();

            if(a<0 || b<0)
            {
                System.out.println("number are not numeric");
            }
            else
            {
                float total = a + b;
                System.out.printf("sum=%.2f %n ", total);
            }
            p++;
        }
    }
}
-------------------------------------------------------------------------------------------
5)
Rat Count House
The function accepts two positive integers ‘r’ and ‘unit’ and a positive integer array ‘arr’ of
size ‘n’ as its argument ‘r’ represents the number of rats present in an area, ‘unit’ is the
amount of food each rat consumes and each ith element of array ‘arr’ represents the amount
of food present in ‘i+1’ house number, where 0 <= i
Note:
a)Return -1 if the array is null
b)Return 0 if the total amount of food from all houses is not sufficient for all the rats.
c)Computed values lie within the integer range.
Example:
Input:

->r: 7
->unit: 2
->n: 8
->arr: 2 8 3 5 7 4 1 2
output :
4
Explanation:
Total amount of food required for all rats = r * unit
= 7 * 2 = 14.
The amount of food in 1st houses = 2+8+3+5 = 18. Since, amount of food in 1st 4 houses is
sufficient for all the rats. Thus, output is 4.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter r");
        int r= sc.nextInt();
        System.out.println("enter unit");
        int unit= sc.nextInt();

        System.out.println("enter size");
        int size= sc.nextInt();
        int a[]=new int[size];

        for(int i=0;i<a.length;i++)
        {
            a[i]= sc.nextInt();
        }

        if(size==0)
        {
            System.out.println(-1);
        }
        else
        {
            int total=0;
            int count=0;
            for(int i=0;i<a.length;i++)
            {
                total=total+a[i];
                count++;
                if(total>=(r*unit))
                {
                    System.out.println(count);
                    break;
                }
                else {
                    System.out.println(0);
                    break;
                }
            }
        }
    }
}
-----------------------------------------------------------------------------------------
6)
You are given a function,
int findCount(int arr[], int length, int num, int diff);
The function accepts an integer array ‘arr’, its length and two integer variables ‘num’ and
‘diff’. Implement this function to find and return the number of elements of ‘arr’ having an
absolute difference of less than or equal to ‘diff’ with ‘num’.
Note: In case there is no element in ‘arr’ whose absolute difference with ‘num’ is less than or
equal to ‘diff’, return -1.
Example:
Input:
->arr: 12 3 14 56 77 13
->num: 13
->diff: 2
Output:
3
Explanation:
Elements of ‘arr’ having absolute difference of less than or equal to ‘diff’ i.e. 2 with ‘num’ i.e.
13 are 12, 13 and 14.

import java.util.Scanner;
public class Main {
    static int  findCount(int a[],  int num, int diff){
        int count=0;
        for(int i=0;i<a.length;i++)
        {
            if(Math.abs( num-a[i])<=diff )
            {
                count++;
            }
        }
        if(count==0)
            return -1;
        else
            return count;
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter size");
        int size= sc.nextInt();
        int a[]=new int[size];

        System.out.println("enter number");
        for(int i=0;i<a.length;i++)
        {
            a[i]= sc.nextInt();
        }

        System.out.println("enter num");
        int num= sc.nextInt();
        System.out.println("enter diff");
        int diff= sc.nextInt();

        System.out.println(findCount(a,num,diff));
    }
}
-------------------------------------------------------------------------------------------
7)
Implement the following Function
def differenceofSum(n. m)

The function accepts two integers n, m as arguments Find the sum of all numbers in range
from 1 to m(both inclusive) that are not divisible by n. Return difference between sum of
integers not divisible by n with sum of numbers divisible by n.
Assumption:
a)n>0 and m>0
b)Sum lies between integral range
Example
Input
n:4
m:20
Output
90
Explanation
a)Sum of numbers divisible by 4 are 4 + 8 + 12 + 16 + 20 = 60
b)Sum of numbers not divisible by 4 are 1 +2 + 3 + 5 + 6 + 7 + 9 + 10 + 11 + 13 + 14 + 15 +
17 + 18 + 19 = 150
c)Difference 150 – 60 = 90
Sample Input
n:3
m:10
Sample Output
19

import java.util.Scanner;
public class Main {
    static void differenceofSum(int n,int m)
    {
        int even=0;
        int odd=0;
        for(int i=1;i<=m;i++)
        {
            if(i%n==0)
            {
                even=even+i;
            }
            else
            {
                odd=odd+i;
            }
        }
        System.out.println(odd-even);
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);

        System.out.println("enter n");
        int n= sc.nextInt();
        System.out.println("enter m");
        int m= sc.nextInt();

       differenceofSum(n,m);
    }
}
------------------------------------------------------------------------------------------

8)
Implement the following Function
def ProductSmallestPair(sum, arr)
The function accepts an integers sum and an integer array arr of size n. Implement the
function to find the pair, (arr[j], arr[k]) where j!=k, Such that arr[j] and arr[k] are the least two
elements of array (arr[j] + arr[k] <= sum) and return the product of element of this pair
NOTE
->Return -1 if array is empty or if n<2
->Return 0, if no such pairs found
->All computed values lie within integer range
Example

Input
sum:9
size of Arr = 7
Arr:5 2 4 3 9 7 1
Output
2
Explanation
Pair of least two element is (2, 1) 2 + 1 = 3 < 9, Product of (2, 1) 2*1 = 2. Thus, output is 2
Sample Input
sum:4
size of Arr = 6
Arr:9 8 3 -7 3 9
Sample Output
-21
import java.util.Scanner;
public class Main {
    static int ProductSmallestPair(int sum, int a[])
    {
        if(a.length<2)
        {
            return -1;
        }
        int count=0;
        for(int i=0;i<a.length;i++)
        {
            for(int j=0;j<a.length;j++)
            {
                if(a[i]+a[j]==sum && i!=j)
                {
                    count++;
                }
                if(a[i]*a[j]==sum && i!=j)
                {
                    count++;
                }
            }
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter sum");
        int sum= sc.nextInt();

        System.out.println("enter size");
        int size= sc.nextInt();
        int a[]=new int[size];

        System.out.println("enter number");
        for(int i=0;i<a.length;i++)
        {
            a[i]= sc.nextInt();
        }

        System.out.println(ProductSmallestPair(sum,a));;
    }
}---------------------------------------------------------------------------------

9)
Problem Statement
A carry is a digit that is transferred to left if sum of digits exceeds 9 while adding two
numbers from right-to-left one digit at a time
You are required to implement the following function.
Int NumberOfCarries(int num1 , int num2);
The functions accepts two numbers ‘num1’ and ‘num2’ as its arguments. You are required to
calculate and return the total number of carries generated while adding digits of two
numbers ‘num1’ and ‘ num2’.
Assumption: num1, num2>=0
Example:

Input
Num 1: 451
Num 2: 349
Output
2
Explanation:
Here, we add the numbers digit by digit from right to left:
Adding 1 and 9 (rightmost digits): 1 + 9 = 10 (carry 1)
Adding 5, 4, and the carry: 5 + 4 + 1 = 10 (carry 1)
Adding 4, 3, and the carry: 4 + 3 + 1 = 8 (no carry

Adding ‘num 1’ and ‘num 2’ right-to-left results in 2 carries since ( 1+9) is 10. 1 is carried and
(5+4=1) is 10, again 1 is carried. Hence 2 is returned.
Sample Input
Num 1: 23
Num 2: 563
Sample Output
0

import java.util.Scanner;
public class Main {

    static int NumberOfCarries(int num1 , int num2)
    {
       int rem;
       int rem1;
       int total=0;
       int count=0;

       while(num1>0 || num2>0)
       {
           rem=num1%10;
           rem1=num2%10;
           total=rem1+rem;
           if(total>=10)
           {
               count++;
           }
           else if(total+1>=10)
           {
               count++;
           }
           num1=num1/10;
           num2=num2/10;
       }
       return count;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter num1");
        int num1= sc.nextInt();
        System.out.println("enter num2");
        int num2= sc.nextInt();

        System.out.println(NumberOfCarries(num1,num2));

    }
}
------------------------------------------------------------------------------------------
10)Problem Statement
You are required to implement the following function.
Int OperationChoices(int c, int n, int a , int b )
The function accepts 3 positive integers ‘a’ , ‘b’ and ‘c ‘ as its arguments. Implement the
function to return.
( a+ b ) , if c=1
( a – b ) , if c=2
( a * b ) , if c=3
(a / b) , if c =4
Assumption : All operations will result in integer output.
Example:

Input
c :1
a:12
b:16
Output:
Since ‘c’=1 , (12+16) is performed which is equal to 28 , hence 28 is returned.
Sample Input
c : 2
a : 16
b : 20
Sample Output
-4

import java.util.Scanner;
public class Main {
    static int OperationChoices(int c,  int a , int b )
    {
        int total=0;
        switch (c){
            case 1:
                 total= (a+b);
                break;
            case 2:
                 total=  (a-b);
                 break;
            case 3:
                 total=  a*b;
                 break;
            case 4:
                 total=  a/b;
                 break;
        }
        return total;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter c");
        int c= sc.nextInt();
        System.out.println("enter a");
        int a= sc.nextInt();
        System.out.println("enter b");
        int b= sc.nextInt();

        System.out.println(OperationChoices(c,a,b));
    }
}
-----------------------------------------------------------------------------------------